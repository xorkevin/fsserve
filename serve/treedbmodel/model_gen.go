// Code generated by go generate forge model v0.4.3; DO NOT EDIT.

package treedbmodel

import (
	"context"
	"fmt"
	"strings"

	"xorkevin.dev/forge/model/sqldb"
)

type (
	fileModelTable struct {
		TableName string
	}
)

func (t *fileModelTable) Setup(ctx context.Context, d sqldb.Executor) error {
	_, err := d.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS "+t.TableName+" (filepath VARCHAR(4095) PRIMARY KEY, hash VARCHAR(2047) NOT NULL, contenttype VARCHAR(255) NOT NULL);")
	if err != nil {
		return err
	}
	_, err = d.ExecContext(ctx, "CREATE INDEX IF NOT EXISTS "+t.TableName+"_hash_index ON "+t.TableName+" (hash);")
	if err != nil {
		return err
	}
	return nil
}

func (t *fileModelTable) Insert(ctx context.Context, d sqldb.Executor, m *Model) error {
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (filepath, hash, contenttype) VALUES ($1, $2, $3);", m.Filepath, m.Hash, m.ContentType)
	if err != nil {
		return err
	}
	return nil
}

func (t *fileModelTable) InsertBulk(ctx context.Context, d sqldb.Executor, models []*Model, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*3)
	for c, m := range models {
		n := c * 3
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d)", n+1, n+2, n+3))
		args = append(args, m.Filepath, m.Hash, m.ContentType)
	}
	_, err := d.ExecContext(ctx, "INSERT INTO "+t.TableName+" (filepath, hash, contenttype) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}

func (t *fileModelTable) GetModelEqFilepath(ctx context.Context, d sqldb.Executor, filepath string) (*Model, error) {
	m := &Model{}
	if err := d.QueryRowContext(ctx, "SELECT filepath, hash, contenttype FROM "+t.TableName+" WHERE filepath = $1;", filepath).Scan(&m.Filepath, &m.Hash, &m.ContentType); err != nil {
		return nil, err
	}
	return m, nil
}
